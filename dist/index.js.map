{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nextGraphemeClusterBreak = require( '@stdlib/string-next-grapheme-cluster-break' );\nvar CircularBuffer = require( '@stdlib/dstructs-circular-buffer' );\nvar zeros = require( '@stdlib/array-base-zeros' );\n\n\n// MAIN //\n\n/**\n* Returns the last `n` grapheme clusters (i.e., user-perceived characters) of a string.\n*\n* @param {string} str - input string\n* @param {NonNegativeInteger} n - number of grapheme clusters to return\n* @returns {string} output string\n*\n* @example\n* var out = last( 'Hello World', 1 );\n* // returns 'd'\n*\n* @example\n* var out = last( 'Evening', 3 );\n* // returns 'ing'\n*\n* @example\n* var out = last( 'JavaScript', 6 );\n* // returns 'Script'\n*\n* @example\n* var out = last( '\u516D\u4E66/\u516D\u66F8', 1 );\n* // returns '\u66F8'\n*\n* @example\n* var out = last( '\uD83D\uDC36\uD83D\uDC2E\uD83D\uDC37\uD83D\uDC30\uD83D\uDC38', 2 );\n* // returns '\uD83D\uDC30\uD83D\uDC38'\n*/\nfunction last( str, n ) {\n\tvar count;\n\tvar cbuf;\n\tvar buf;\n\tvar i;\n\n\tif ( n === 0 || str === '' ) {\n\t\treturn '';\n\t}\n\t// Resolve the first cluster break:\n\ti = nextGraphemeClusterBreak( str, 0 );\n\n\t// If we received a sentinel value, return the input string, as there are no more cluster breaks to iterate over...\n\tif ( i === -1 ) {\n\t\treturn str;\n\t}\n\t// Initialize a buffer for keeping track of cluster break indices:\n\tbuf = zeros( n );\n\n\t// Wrap the buffer to create a circular buffer serving as a FIFO stack where we can keep at most `n` indices as we iterate from left-to-right:\n\tcbuf = new CircularBuffer( buf );\n\n\t// Add the first character index:\n\tcbuf.push( 0 );\n\n\t// Add the index of the first grapheme cluster break to our buffer:\n\tcbuf.push( i );\n\n\t// Slide a window over the string from left-to-right...\n\tcount = 0;\n\twhile ( true ) {\n\t\tcount += 1;\n\t\ti = nextGraphemeClusterBreak( str, i );\n\t\tif ( i === -1 ) {\n\t\t\tbreak;\n\t\t}\n\t\tcbuf.push( i );\n\t}\n\t// Resolve the leftmost index:\n\ti = buf[ (count+1)%n ]; // count+1 as count%n corresponds to the index of the \"newest\" element in the circular buffer and count+1 is the next element to replace (i.e., the \"oldest\" index)\n\n\t// Return the last `n` grapheme clusters:\n\treturn str.substring( i );\n}\n\n\n// EXPORTS //\n\nmodule.exports = last;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the last `n` grapheme clusters (i.e., user-perceived characters) of a string.\n*\n* @module @stdlib/string-base-last-grapheme-cluster\n*\n* @example\n* var last = require( '@stdlib/string-base-last-grapheme-cluster' );\n*\n* var out = last( 'Hello', 1 );\n* // returns 'o'\n*\n* out = last( 'JavaScript', 6 );\n* // returns 'Script'\n*\n* out = last( '\uD83D\uDC2E\uD83D\uDC37\uD83D\uDC38\uD83D\uDC35', 2 );\n* // returns '\uD83D\uDC38\uD83D\uDC35'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAA2B,QAAS,4CAA6C,EACjFC,EAAiB,QAAS,kCAAmC,EAC7DC,EAAQ,QAAS,0BAA2B,EAgChD,SAASC,EAAMC,EAAKC,EAAI,CACvB,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKJ,IAAM,GAAKD,IAAQ,GACvB,MAAO,GAMR,GAHAK,EAAIT,EAA0BI,EAAK,CAAE,EAGhCK,IAAM,GACV,OAAOL,EAgBR,IAbAI,EAAMN,EAAOG,CAAE,EAGfE,EAAO,IAAIN,EAAgBO,CAAI,EAG/BD,EAAK,KAAM,CAAE,EAGbA,EAAK,KAAME,CAAE,EAGbH,EAAQ,EAEPA,GAAS,EACTG,EAAIT,EAA0BI,EAAKK,CAAE,EAChCA,IAAM,IAGXF,EAAK,KAAME,CAAE,EAGd,OAAAA,EAAID,GAAMF,EAAM,GAAGD,CAAE,EAGdD,EAAI,UAAWK,CAAE,CACzB,CAKAV,EAAO,QAAUI,IChEjB,IAAIO,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "nextGraphemeClusterBreak", "CircularBuffer", "zeros", "last", "str", "n", "count", "cbuf", "buf", "i", "main"]
}
